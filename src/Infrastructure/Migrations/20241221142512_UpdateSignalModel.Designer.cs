// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingSystem.Common.Models;
using TradingSystem.Infrastructure.Data;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TradingContext))]
    [Migration("20241221142512_UpdateSignalModel")]
    partial class UpdateSignalModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingSystem.Common.Models.Indicator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DependenciesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("SettingsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("TheoryName")
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("ValuesJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TheoryName");

                    b.HasIndex("Type");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.MarketData", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("AskPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("AskSize")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("BidPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("BidSize")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("CumulativeDelta")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<Dictionary<string, decimal>>("CustomMetrics")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ImbalanceRatio")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<Dictionary<string, decimal>>("Indicators")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<decimal?>("LiquidityScore")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("MarketCondition")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTrades")
                        .HasColumnType("integer");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("OpenInterest")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<List<OrderBookLevel>>("OrderBook")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("QuoteVolume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<List<Trade>>("RecentTrades")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("RelativeVolume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("SpreadPercentage")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("TakerBuyVolume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("TakerSellVolume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VWAP")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("Volatility")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("Symbol", "Timestamp");

                    b.HasIndex("Interval");

                    b.HasIndex("MarketCondition");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Symbol", "Timestamp");

                    b.ToTable("MarketData");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AverageFilledPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("ClientOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Commission")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("CommissionAsset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExchangeOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("FilledQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<bool>("IsClosePosition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReduceOnly")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("LimitPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("RemainingQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Slippage")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StopPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Dictionary<string, string>>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("TimeInForce")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TradeId")
                        .HasColumnType("uuid");

                    b.Property<string>("TriggerCondition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TriggerType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientOrderId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("ExchangeOrderId");

                    b.HasIndex("Status");

                    b.HasIndex("StrategyName");

                    b.HasIndex("Symbol");

                    b.HasIndex("TradeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Signal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetricsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.SignalCondition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ParametersJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SignalId");

                    b.ToTable("SignalConditions");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Theory", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CloseSignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenSignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, decimal>>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("Symbols")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Name");

                    b.HasIndex("CloseSignalId");

                    b.HasIndex("OpenSignalId");

                    b.ToTable("Theories");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Commission")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DrawdownFromPeak")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("EntryPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ExitPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<Dictionary<string, decimal>>("Indicators")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("MarketCondition")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentTradeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("RealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("ReturnOnInvestment")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<Dictionary<string, decimal>>("RiskMetrics")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("RiskRewardRatio")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("SetupType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<List<Signal>>("Signals")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("Slippage")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StopLoss")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("TakeProfit")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("UnrealizedPnL")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("CloseTime");

                    b.HasIndex("OpenTime");

                    b.HasIndex("ParentTradeId");

                    b.HasIndex("Status");

                    b.HasIndex("StrategyName");

                    b.HasIndex("Symbol");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Indicator", b =>
                {
                    b.HasOne("TradingSystem.Common.Models.Theory", null)
                        .WithMany("Indicators")
                        .HasForeignKey("TheoryName");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.SignalCondition", b =>
                {
                    b.HasOne("TradingSystem.Common.Models.Signal", null)
                        .WithMany("Conditions")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Theory", b =>
                {
                    b.HasOne("TradingSystem.Common.Models.Signal", "CloseSignal")
                        .WithMany()
                        .HasForeignKey("CloseSignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSystem.Common.Models.Signal", "OpenSignal")
                        .WithMany()
                        .HasForeignKey("OpenSignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloseSignal");

                    b.Navigation("OpenSignal");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Trade", b =>
                {
                    b.HasOne("TradingSystem.Common.Models.Trade", null)
                        .WithMany()
                        .HasForeignKey("ParentTradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Signal", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("TradingSystem.Common.Models.Theory", b =>
                {
                    b.Navigation("Indicators");
                });
#pragma warning restore 612, 618
        }
    }
}
