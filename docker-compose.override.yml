version: '3.8'

services:
  tradingsystem:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - HealthChecks__UI__HealthCheckDatabaseConnectionString=Data Source=/tmp/healthchecksdb
      - HealthChecks__UI__UseRelativeApiPath=true
      - HealthChecks__UI__UseRelativeResourcesPath=true
      - HealthChecks__UI__UseRelativeWebhookPath=true
      - HealthChecks__UI__ServerAddresses=http://+:80
      - HealthChecks__UI__HealthCheckEndpoint=http://127.0.0.1:80/healthz
      - HealthChecks__UI__ApiPath=/healthchecks-api
      - HealthChecks__UI__UIPath=/healthchecks-ui
      - HealthChecks__UI__Storage__InMemory__Enabled=true
      - HealthChecks__UI__Storage__InMemory__RetentionPeriod=00:05:00
      - HealthChecks__UI__EvaluationTimeInSeconds=10
      - HealthChecks__UI__MinimumSecondsBetweenFailureNotifications=60
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=tradingsystem_dev;Username=postgres;Password=postgres
      - Redis__ConnectionString=redis:6379
      - Logging__LogLevel__Default=Debug
      - Logging__LogLevel__Microsoft=Information
      - Logging__LogLevel__Microsoft.Hosting.Lifetime=Information
    volumes:
      - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro
      - ~/.aspnet/https:/root/.aspnet/https:ro
      - ./src:/app/src:ro
    ports:
      - "5002:80"
      - "5003:443"
    networks:
      trading-network:
        aliases:
          - tradingsystem
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "localhost:127.0.0.1"
    dns_search: trading-network
    dns:
      - 127.0.0.11
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    environment:
      - POSTGRES_DB=tradingsystem_dev
    ports:
      - "5432:5432"
    volumes:
      - ./scripts/init-dev-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - trading-network

  redis:
    command: redis-server --appendonly yes --requirepass devpassword
    ports:
      - "6379:6379"
    networks:
      - trading-network

  pgadmin:
    environment:
      - PGADMIN_DEFAULT_EMAIL=dev@tradingsystem.com
      - PGADMIN_DEFAULT_PASSWORD=devpassword
    ports:
      - "5050:80"
    networks:
      - trading-network

  # Additional development services
  seq:
    image: datalust/seq:latest
    container_name: trading-seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - seq-data:/data
    networks:
      - trading-network

  mailhog:
    image: mailhog/mailhog
    container_name: trading-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - trading-network

  # Development tools
  adminer:
    image: adminer
    container_name: trading-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - trading-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trading-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:devpassword
    ports:
      - "8081:8081"
    networks:
      - trading-network
    depends_on:
      - redis

volumes:
  seq-data:

networks:
  trading-network:
    name: trading-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
