version: '3.8'

services:
  tradingsystem:
    image: ${DOCKER_REGISTRY:-tradingsystem}/tradingsystem:${TAG:-latest}
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=tradingsystem_prod;Username=${DB_USER};Password=${DB_PASSWORD}
      - Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD}
      - Logging__LogLevel__Default=Warning
      - Serilog__MinimumLevel=Warning
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
    secrets:
      - db_password
      - redis_password
      - jwt_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=tradingsystem_prod
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-prod-data:/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 2G
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - tradingsystem

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    deploy:
      placement:
        constraints:
          - node.role == manager
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.x
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.x
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    deploy:
      placement:
        constraints:
          - node.role == manager
    depends_on:
      - elasticsearch

volumes:
  postgres-prod-data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis-prod-data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  prometheus-data:
  grafana-data:
  elasticsearch-data:

secrets:
  db_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true

networks:
  trading-network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
